// Code generated by sqlc. DO NOT EDIT.
// source: transfes_psp.sql

package db

import (
	"context"
)

const createTransferPsp = `-- name: CreateTransferPsp :one
INSERT INTO transfers_psp (
  account_id,
  psp_account_id,
  amount
) VALUES (
  $1, $2, $3
) RETURNING id, account_id, psp_account_id, amount, created_at
`

type CreateTransferPspParams struct {
	AccountID    int64 `json:"accountID"`
	PspAccountID int64 `json:"pspAccountID"`
	Amount       int64 `json:"amount"`
}

func (q *Queries) CreateTransferPsp(ctx context.Context, arg CreateTransferPspParams) (TransfersPsp, error) {
	row := q.db.QueryRowContext(ctx, createTransferPsp, arg.AccountID, arg.PspAccountID, arg.Amount)
	var i TransfersPsp
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.PspAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getTransferPsp = `-- name: GetTransferPsp :one
SELECT id, account_id, psp_account_id, amount, created_at FROM transfers_psp
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransferPsp(ctx context.Context, id int64) (TransfersPsp, error) {
	row := q.db.QueryRowContext(ctx, getTransferPsp, id)
	var i TransfersPsp
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.PspAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listTransfersPsp = `-- name: ListTransfersPsp :many
SELECT id, account_id, psp_account_id, amount, created_at FROM transfers_psp
WHERE 
    account_id = $1 OR
    psp_account_id = $2
ORDER BY id
LIMIT $3
OFFSET $4
`

type ListTransfersPspParams struct {
	AccountID    int64 `json:"accountID"`
	PspAccountID int64 `json:"pspAccountID"`
	Limit        int32 `json:"limit"`
	Offset       int32 `json:"offset"`
}

func (q *Queries) ListTransfersPsp(ctx context.Context, arg ListTransfersPspParams) ([]TransfersPsp, error) {
	rows, err := q.db.QueryContext(ctx, listTransfersPsp,
		arg.AccountID,
		arg.PspAccountID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TransfersPsp{}
	for rows.Next() {
		var i TransfersPsp
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.PspAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
